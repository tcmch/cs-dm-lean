The formal language of a logic is defined by a *syntax* (akin to the
grammar of a natural language). The definition of what is required for
a proposition to be judged to be true provides the *semantics* of a
logic. The rules for *soundly*n transforming given propositions into
new propositions are called *inference rules*. A deductive *proof* in
a logic is a demonstration that some proposition (*a conclusion*) can
be deduced from a set of propositions (*premises*) that are known or
assumed to be true by the successive application of inference rules
to premises.



The set of propositions
that can be so expressed in a logic is defined by a *syntax*. A syntax
is a set of rules that describes the valid forms that propositions can
have in that particular logic. There are many different logics, each
with its own syntax.

propositions are
written, a definition of what it means for a given proposition (a
*conclusion*) to be true or not, based on propositions (*premises*)
already known or assumed to be true.


evaluating the truth o defined by (1) a *syntax* that specifies the set (usually
infinite) of *well formed expressions* in the language (also called
*well formed formulae*, or *wffs*), (2) a *semantics* by which one can
evaluate *truth value* of any such expression, and
(3) a reasoning, or proof, system, in the form of a set of rules for
soundly deriving new expressions starting from a set of expressions

Each sentence in a logical language is intended to represent a *truth
claim*: an assertion, about the prevailing *state of affairs* in some
*domain of discourse* that is either true or false.

Dafny *assertions* are logical expressions in this sense: they assert
that the state of a program at a specific point in its execution has
certain properties (e.g., that the value of a loop index is greater
than zero) , or that a specific relationship always holds between the
state of the program before and after some code is run (e.g., pre- and
post-conditions and loop invariants).
